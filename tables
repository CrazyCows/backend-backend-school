CREATE TABLE clearance_levels(
    id SERIAL PRIMARY KEY NOT NULL,
    uid_clearance UUID UNIQUE DEFAULT uuid_generate_v4(),
    role VARCHAR(100) UNIQUE NOT NULL,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );


CREATE TABLE users(
        id SERIAL PRIMARY KEY,
        uid_user UUID UNIQUE DEFAULT uuid_generate_v4(),
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL,
        phone CHAR(8),
        role VARCHAR(100) NOT NULL,
        username varchar(255) NOT NULL,
        password bytea NOT NULL,
        last_login TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        registration TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(role) REFERENCES clearance_levels(role)
    );


CREATE TABLE shifts(
    id SERIAL PRIMARY KEY,
    uid_shift uuid UNIQUE DEFAULT uuid_generate_v4(),
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL ,
    active BOOLEAN DEFAULT TRUE,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE shift_member(
    id SERIAL PRIMARY KEY,
    uid_shift UUID REFERENCES shifts(uid_shift) ON DELETE CASCADE,
    uid_user UUID REFERENCES users(uid_user) ON DELETE CASCADE,
    attendance BOOLEAN DEFAULT TRUE,
    wished BOOlEAN DEFAULT FALSE,
    assigned BOOLEAN DEFAULT FALSE
);


CREATE OR REPLACE FUNCTION get_shifts_for_month(month_date DATE, users_id INTEGER) RETURNS TABLE (
   uid_shift INT,
   start_time TIMESTAMP,
   end_time TIMESTAMP,
   active BOOLEAN,
   myShift BOOLEAN
) AS $$

BEGIN
   RETURN QUERY
   SELECT shifts.uid_shift, shifts.start_time, shifts.end_time, shifts.active,
   CASE WHEN shift_member.uid_user = users_id THEN TRUE ELSE FALSE END AS myShift
   FROM shifts JOIN shift_member ON shifts.uid_shift = shift_member.uid_shift
   WHERE EXTRACT(YEAR FROM shifts.start_time) = EXTRACT(YEAR FROM month_date)
     AND EXTRACT(MONTH FROM shifts.start_time) = EXTRACT(MONTH FROM month_date);


END;
$$ LANGUAGE plpgsql;

DROP TABLE users;
DROP TABLE shift_member;